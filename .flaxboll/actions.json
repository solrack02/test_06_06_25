{"1749481236092":{"actionType":"saveAll","createdAt":"1749481236092","actionID":"1749481236092","userID":"#TEMP","path":"system.capsules.09c4c85c-2dd8-439b-a0d8-80eeac65d933.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport JSON5 from 'json5';\nimport React, { useEffect, useState } from 'react';\nimport { Pressable, ScrollView, View } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, mapElements, getVarValue, pathSel } from '../project';\nimport { useData } from '../../..';\n\nexport const css =\n  'color: lightblue; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\n\ntype Tconds = '==' | '!=' | '>' | '<' | '<=' | '>=';\ntype Tprops = {\n  pass: {\n    elementsProperties: any;\n    styles: any;\n    functions: any[];\n    childrenItems: any;\n    args: any;\n  };\n};\n\nexport const processFunctions = async (arr: any[]) => {\n  const defaultVal = { trigger: '', arrFunctions: [] };\n\n  for (const fn of arr) {\n    if (typeof fn === 'function') {\n      const result = await fn();\n      return result || defaultVal;\n    }\n  }\n\n  return defaultVal;\n};\n\n// DynView / BOX\nexport const DynView = (props: Tprops) => {\n  if (!props) return <></>;\n\n  const [sttTypeFunc, setTypeFunc] = useState('');\n  const [sttCondParts, setCondParts] = useState({\n    path: '',\n    operator: '==',\n    compareVal: null,\n  });\n  const [sttPressFuncs, setPressFuncs] = useState<\n    Array<(args: any) => Promise<void>>\n  >([]);\n\n  let varValue = useData(ct => pathSel(ct, sttCondParts.path));\n\n  // ---------- set Props\n  const { elementsProperties, styles, functions } = props.pass;\n  const { childrenItems, args } = props.pass;\n\n  const callFn = async () => {\n    const { trigger, arrFunctions } = await processFunctions(functions);\n    setTypeFunc(trigger);\n    setPressFuncs(arrFunctions);\n\n    // ------- set Init Functions (Capsules)\n    if (trigger === 'on init') {\n      for (const currFunc of arrFunctions) await currFunc(args);\n    }\n    if (trigger === 'on listen') {\n      for (const currFunc of arrFunctions) {\n        const res: [string, Tconds, any] = await currFunc(args);\n        const path = res[0];\n        const operator = res[1];\n        const compareVal = res[2];\n\n        if (typeof path === 'string') {\n          console.log('VarPath', path);\n          setCondParts({ path, operator, compareVal });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    callFn();\n  }, []);\n\n  // ---------- set Variables Styles (If Exists)\n  const stl = getStlValues(styles);\n\n  // ------- set User Element Properties (If Exists)\n  const userElProps: any = {};\n  for (let strObj of elementsProperties) {\n    if (!strObj) continue;\n    if (!props) continue;\n    if (typeof strObj !== 'string') continue;\n\n    const parsedObject = JSON5.parse(strObj);\n\n    for (const keyProp in parsedObject) {\n      const valueProp = parsedObject[keyProp];\n\n      const [hasVar, varValue] = getVarValue(valueProp);\n\n      if (hasVar) userElProps[keyProp] = varValue;\n      if (!hasVar) userElProps[keyProp] = valueProp;\n    }\n  }\n\n  const allProps = {\n    style: stl,\n    ...userElProps,\n  };\n\n  // ---------- set Render\n  if (!sttTypeFunc)\n    return <View {...allProps}>{mapElements(childrenItems, args)}</View>;\n\n  if (sttTypeFunc === 'on press') {\n    allProps.children = mapElements(childrenItems, args);\n    allProps.onPress = async () => {\n      for (const currFunc of sttPressFuncs) await currFunc(args);\n    };\n\n    return <Pressable {...allProps} />;\n  }\n\n  if (sttTypeFunc === 'on init')\n    return <View {...allProps}>{mapElements(childrenItems, args)}</View>;\n\n  if (sttTypeFunc === 'on listen') {\n    const operators = {\n      '==': (a, b) => a == b,\n      '!=': (a, b) => a != b,\n      '>': (a, b) => a > b,\n      '>=': (a, b) => a >= b,\n      '<': (a, b) => a < b,\n      '<=': (a, b) => a <= b,\n    };\n\n    const operatorFunc = operators[sttCondParts.operator];\n    const condShow = operatorFunc?.(varValue, sttCondParts.compareVal);\n\n\n    return (\n      condShow && <View {...allProps}>{mapElements(childrenItems, args)}</View>\n    );\n  }\n};\n","newValue":"// ---------- import Packs\nimport JSON5 from 'json5';\nimport React, { useEffect, useState } from 'react';\nimport { Pressable, ScrollView, View } from 'react-native';\n\n// ---------- import Local Tools\nimport { getStlValues, mapElements, getVarValue, pathSel } from '../project';\nimport { useData } from '../../..';\n\nexport const css =\n  'color: lightblue; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\n\ntype Tconds = '==' | '!=' | '>' | '<' | '<=' | '>=';\ntype Tprops = {\n  pass: {\n    elementsProperties: any;\n    styles: any;\n    functions: any[];\n    childrenItems: any;\n    args: any;\n  };\n};\n\nexport const processFunctions = async (arr: any[]) => {\n  const defaultVal = { trigger: '', arrFunctions: [] };\n\n  for (const fn of arr) {\n    if (typeof fn === 'function') {\n      const result = await fn();\n      return result || defaultVal;\n    }\n  }\n\n  return defaultVal;\n};\n\n// DynView / BOX\nexport const DynView = (props: Tprops) => {\n  if (!props) return <></>;\n\n  const [sttTypeFunc, setTypeFunc] = useState('');\n  const [sttCondParts, setCondParts] = useState({\n    path: '',\n    operator: '==',\n    compareVal: null,\n  });\n  const [sttPressFuncs, setPressFuncs] = useState<\n    Array<(args: any) => Promise<void>>\n  >([]);\n\n  let varValue = useData(ct => pathSel(ct, sttCondParts.path));\n\n  // ---------- set Props\n  const { elementsProperties, styles, functions } = props.pass;\n  const { childrenItems, args } = props.pass;\n\n  const callFn = async () => {\n    const { trigger, arrFunctions } = await processFunctions(functions);\n    setTypeFunc(trigger);\n    setPressFuncs(arrFunctions);\n\n    // ------- set Init Functions (Capsules)\n    if (trigger === 'on init') {\n      for (const currFunc of arrFunctions) await currFunc(args);\n    }\n    if (trigger === 'on listen') {\n      for (const currFunc of arrFunctions) {\n        const res: [string, Tconds, any] = await currFunc(args);\n        const path = res[0];\n        const operator = res[1];\n        const compareVal = res[2];\n\n        if (typeof path === 'string') {\n          console.log('VarPath', path);\n          setCondParts({ path, operator, compareVal });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    callFn();\n  }, []);\n\n  // ---------- set Variables Styles (If Exists)\n  const stl = getStlValues(styles);\n\n  // ------- set User Element Properties (If Exists)\n  const userElProps: any = {};\n  for (let strObj of elementsProperties) {\n    if (!strObj) continue;\n    if (!props) continue;\n    if (typeof strObj !== 'string') continue;\n\n    const parsedObject = JSON5.parse(strObj);\n\n    for (const keyProp in parsedObject) {\n      const valueProp = parsedObject[keyProp];\n\n      const [hasVar, varValue] = getVarValue(valueProp);\n\n      if (hasVar) userElProps[keyProp] = varValue;\n      if (!hasVar) userElProps[keyProp] = valueProp;\n    }\n  }\n\n  const allProps = {\n    style: stl,\n    ...userElProps,\n  };\n\n  // ---------- set Render\n  if (!sttTypeFunc)\n    return <View {...allProps}>{mapElements(childrenItems, args)}</View>;\n\n  if (sttTypeFunc === 'on press') {\n    allProps.children = mapElements(childrenItems, args);\n    allProps.onPress = async () => {\n      for (const currFunc of sttPressFuncs) await currFunc(args);\n    };\n\n    return <Pressable {...allProps} />;\n  }\n\n  if (sttTypeFunc === 'on init')\n    return <View {...allProps}>{mapElements(childrenItems, args)}</View>;\n\n  if (sttTypeFunc === 'on listen') {\n    const operators = {\n      '==': (a, b) => a == b,\n      '!=': (a, b) => a != b,\n      '>': (a, b) => a > b,\n      '>=': (a, b) => a >= b,\n      '<': (a, b) => a < b,\n      '<=': (a, b) => a <= b,\n    };\n\n    const operatorFunc = operators[sttCondParts.operator];\n    const condShow = operatorFunc?.(varValue, sttCondParts.compareVal);\n\n    return (\n      condShow && <View {...allProps}>{mapElements(childrenItems, args)}</View>\n    );\n  }\n};\n"}}